import * as THREE from 'three'
import * as CANNON from 'cannon-es'
import { Physics } from '../Physics';
import { World } from '../World'

enum ConnectorType {
  FEMALE = 0,
  MALE = 1
}

interface ConnectorOptions {
  position?: THREE.Vector3
  size?: number
  type: ConnectorType
}

export class Connector {
  world: World;
  
  geometry: THREE.BoxGeometry;
  material: THREE.MeshStandardMaterial;
  mesh: THREE.Mesh<THREE.BoxGeometry, THREE.MeshStandardMaterial>;
  
  physics: Physics;
  physicsBody: CANNON.Body;

  constructor(options?: ConnectorOptions) {
    options = {
      position: new THREE.Vector3(0, 0.8, 0),
      size: 0.03,
      type: ConnectorType.MALE,
      ...options // user parameters
    }

    // ThreeJS
    this.world = new World()

    this.geometry = new THREE.BoxGeometry(options.size, options.size, options.size);

    this.material = new THREE.MeshStandardMaterial({
      color: options.type === ConnectorType.MALE ? "grey" : "yellow"
    })
    
    this.mesh = new THREE.Mesh(this.geometry, this.material)
    this.mesh.userData["parent"] = this

    console.log(this.mesh)

    if (options.position) this.mesh.position.copy(options.position)

    this.world.scene.add(this.mesh)
    this.world.grabbables.push(this.mesh)

    // Physics
    this.physics = new Physics()
    
    this.physicsBody = new CANNON.Body({
      mass: 0.05, // kg
      shape: new CANNON.Box(new CANNON.Vec3(options.size/2, options.size/2, options.size/2)),
    })
    
    this.physics.addToPhysicsWorld(this.mesh, this.physicsBody)
  }

  stickTo(otherConnector: Connector) {
    const localPivotA = new CANNON.Vec3(0,1,0)
    const localPivotB = new CANNON.Vec3(0,-1,0)

    const constraint = new CANNON.PointToPointConstraint(
      this.physicsBody, localPivotA, otherConnector.physicsBody, localPivotB
    )

    this.physics.physicsWorld.addConstraint(constraint)
  }
}